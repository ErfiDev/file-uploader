// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileUploaderClient is the client API for FileUploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUploaderClient interface {
	Upload(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	Edit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*Res, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Res, error)
}

type fileUploaderClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploaderClient(cc grpc.ClientConnInterface) FileUploaderClient {
	return &fileUploaderClient{cc}
}

func (c *fileUploaderClient) Upload(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/protobuf.FileUploader/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileUploaderClient) Edit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/protobuf.FileUploader/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileUploaderClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/protobuf.FileUploader/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileUploaderServer is the server API for FileUploader service.
// All implementations must embed UnimplementedFileUploaderServer
// for forward compatibility
type FileUploaderServer interface {
	Upload(context.Context, *Req) (*Res, error)
	Edit(context.Context, *EditReq) (*Res, error)
	Delete(context.Context, *DeleteReq) (*Res, error)
	mustEmbedUnimplementedFileUploaderServer()
}

// UnimplementedFileUploaderServer must be embedded to have forward compatible implementations.
type UnimplementedFileUploaderServer struct {
}

func (UnimplementedFileUploaderServer) Upload(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFileUploaderServer) Edit(context.Context, *EditReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedFileUploaderServer) Delete(context.Context, *DeleteReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileUploaderServer) mustEmbedUnimplementedFileUploaderServer() {}

// UnsafeFileUploaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUploaderServer will
// result in compilation errors.
type UnsafeFileUploaderServer interface {
	mustEmbedUnimplementedFileUploaderServer()
}

func RegisterFileUploaderServer(s grpc.ServiceRegistrar, srv FileUploaderServer) {
	s.RegisterService(&FileUploader_ServiceDesc, srv)
}

func _FileUploader_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploaderServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FileUploader/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploaderServer).Upload(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileUploader_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploaderServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FileUploader/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploaderServer).Edit(ctx, req.(*EditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileUploader_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploaderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FileUploader/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploaderServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileUploader_ServiceDesc is the grpc.ServiceDesc for FileUploader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUploader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.FileUploader",
	HandlerType: (*FileUploaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _FileUploader_Upload_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _FileUploader_Edit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileUploader_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
